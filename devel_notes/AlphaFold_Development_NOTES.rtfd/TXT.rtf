{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 Menlo-Italic;
\f3\fswiss\fcharset0 Helvetica;\f4\fmodern\fcharset0 Courier-Bold;\f5\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
\red255\green255\blue255;\red47\green180\blue29;\red38\green38\blue38;\red242\green242\blue242;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c100000\c100000\c100000;\cssrgb\c20238\c73898\c14947;\cssrgb\c20000\c20000\c20000;\cssrgb\c96078\c96078\c96078;}
\margl1440\margr1440\vieww22840\viewh16860\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \CocoaLigature0 Oct 15, 2018\
Alphafold2_MS2_bpp.ipynb\
\
\
\
At present model has l, l_BP, Kd_BP, C_init; and just C-G pairs.\
 \
If we collect Kd data on a bunch of sequences with the MS2 hairpin, how well would they constrain the model?\
\
Since we only have single strands, can\'92t get C_init separately from others.\
Just assume l, l_BP at my defaults (0.5, 0.2).\
\
Let\'92s make a bunch of test sequences.\
\'95\'a0First three are \'91controls\'92 that should fold MS2 hairpin nicely.\
\'95\'a0Next few have G/C segments in flanking regions\
\'95\'a010th one (\'91sequence 9\'92 in python) is all C\'92s and G\'92s and definitely forms alternative hairpins\
\
test_sequences = [ MS2_hairpin,\
                  'CCCGCGGCC'+MS2_hairpin+'GGCCGCGGG',\
                   MS2_hairpin+'AAAAAAAAAAAAA',\
                  'AAACGAACGACCA'+MS2_hairpin+'AAACAAAGAAAA',\
                  'GGGC'+MS2_hairpin,\
                  MS2_hairpin+'GGGC',\
                 'AAACCAGCGACGAGGACGACGAGCGACGACGACGAGCGACGACAAACC'+MS2_hairpin,\
                 'AAACCAGCGACGAGGACGACGAAACC'+MS2_hairpin+'CAAGAGGAAAAACCCAAAAAAGCAAC',\
                 'AAAAGAGAGAAACAAAGACAGACAAA'+MS2_hairpin+'AAAAAGAAACAACCAAAGAAAGAAAG',\
                 'CCGCGCCGCGCGCGCGGGCGCGGCGC'+MS2_hairpin+'CGCGCGGCGCGGCGCGCGCGCGGGGG'\
                 ]\
\pard\pardeftab720\sl280\partightenfactor0

\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
OK, here\'92s bpp(MS2) for all sequences;\
\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 {{\NeXTGraphic unknown.png \width7915 \height5448
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf4 \
\
\
\
Imagine \'91real\'92 Kd_BP was 2e-4 M. Would these sequences be enough to \'91solve\'92 for that parameter?\
\
Yea, almost \'96\'a0pretty flat (magenta curve is TOTAL LOSS FUNCTION, offset by 10) \'96\'a0note that 
\f1\b colors are different
\f0\b0  from above.\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 {{\NeXTGraphic 1__#$!@%!#__unknown.png \width7752 \height6076
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf4 \
\
Added jitter of 1kT to bpp_rel values\'85 looks like optimum estimated Kd_BP of 1e-5 in this case \'97 pretty far off 2e-4. \
Still, the most \'91discriminating\'92 sequence is \'91seq 9\'92, the 10th sequence, which is super G-C rich:\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 {{\NeXTGraphic 2__#$!@%!#__unknown.png \width7752 \height6076
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf4 \
\
That useful 10th sequence has a bop plot that has a lot of competitors and suppresses bpp(MS2) to ~1%.\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 {{\NeXTGraphic 3__#$!@%!#__unknown.png \width6072 \height5145
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf4 \
\
\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \ul \ulc4 Profiling\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \ulnone Some modest optimization in code speed might be useful. From command-line\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 python -m cProfile alphafold.py -s CCGCGCCGCGCGCGCGCGCGCGCGCGCGGCGGCCGCGCCCGCGGCGCCCGCGCCGCGCGCGCGCGCGCGCGCGCGGCGGCCGCGCCCGCGGCGC\
\
gives\
\'85\
sequence = CCGCGCCGCGCGCGCGCGCGCGCGCGCGGCGGCCGCGCCCGCGGCGCCCGCGCCGCGCGCGCGCGCGCGCGCGCGGCGGCCGCGCCCGCGGCGC\
cutpoint = ---------------------------------------------------------------------------------------------X\
circle   =  False\
Z = 1.99174433298e+79\
         148690 function calls (148663 primitive calls) in 1.617 seconds\
\
   Ordered by: standard name\
\
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\
       12    0.000    0.000    0.000    0.000 UserDict.py:103(__contains__)\
        7    0.000    0.000    0.000    0.000 UserDict.py:35(__getitem__)\
...\
        6    0.000    0.000    0.000    0.000 locale.py:365(normalize)\
        1    0.000    0.000    0.000    0.000 output_helpers.py:1(<module>)\
        1    0.001    0.001    0.001    0.001 partition.py:1(<module>)\
     8742    0.760    0.000    0.775    0.000 partition.py:137(update_C_eff)\
     8742    0.682    0.000    0.697    0.000 partition.py:170(update_Z_linear)\
        1    0.002    0.002    0.002    0.002 partition.py:197(get_Z_final)\
        1    0.000    0.000    1.606    1.606 partition.py:22(partition)\
        1    0.006    0.006    0.009    0.009 partition.py:228(get_bpp_matrix)\
        1    0.002    0.002    0.003    0.003 partition.py:244(run_cross_checks)\
        1    0.000    0.000    0.008    0.008 partition.py:259(initialize_sequence_information)\
        1    0.000    0.000    0.020    0.020 partition.py:291(initialize_dynamic_programming_matrices)\
    26227    0.031    0.000    0.031    0.000 partition.py:315(unpack_variables)\
        1    0.000    0.000    0.000    0.000 partition.py:34(Partition)\
        1    0.000    0.000    0.000    0.000 partition.py:39(__init__)\
        1    0.000    0.000    0.000    0.000 partition.py:5(AlphaFoldParams)\
        1    0.011    0.011    1.606    1.606 partition.py:51(run)\
        1    0.000    0.000    0.000    0.000 partition.py:72(show_results)\
        1    0.000    0.000    0.000    0.000 partition.py:9(__init__)\
     8742    0.069    0.000    0.082    0.000 partition.py:93(update_Z_BP)\
        1    0.000    0.000    0.000    0.000 partition_helpers.py:1(<module>)\
\
...\
Cool. As hoped for, unpack_variables gives just a little overhead.\
The things that cost the most are the N^3 math.\
\
Could probably accelerate by ~2x if we didn\'92t ask for derivatives. (and note that when we extend derivatives to full parameter set, we\'92ll probably take a big hit.) yes, get 2x speedup:\
        1    0.001    0.001    0.001    0.001 partition.py:1(<module>)\
     8742    0.375    0.000    0.390    0.000 partition.py:137(update_C_eff)\
     8742    0.340    0.000    0.356    0.000 partition.py:170(update_Z_linear)\
        1    0.002    0.002    0.002    0.002 partition.py:197(get_Z_final)\
\
Could get another ~2x speedup if we strategically only calculate the Z_BP needed for bpp(MS2) calc.\
\
\
27 October, 2018\
Alphafold3_tRNA_bpp_viz\
Put in A-U base pairs in addition to G-C; also coaxial stacking is in.\
\pard\pardeftab720\sl320\partightenfactor0

\fs28 \cf4 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 sequence = GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
cutpoint = ---------------------------------------------------------------------------X\
circle   =  False\
Z = 9.84327299285e+188\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
Ran tRNA, getting something out \'97 not quite native (5 helices instead of four):\
\pard\pardeftab720\sl280\partightenfactor0

\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 {{\NeXTGraphic 4__#$!@%!#__unknown.png \width6038 \height5107
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf4 \
\
\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \ul 4 November, 2018\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \ulnone Worked out object-oriented programming & backtracking (first on  
\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 rhiju/test_backtrack and then on \cf6 rhiju/simplify_recursions
\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 )\
\
\
In master, tRNA folding takes 1 sec:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 BIOCHEM-C02SL0WGG8WM:alphafold_master rhiju$ time ./alphafold.py -s GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
sequence = GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
cutpoint = ---------------------------------------------------------------------------X\
circle   =  False\
Z = 9.84327299285e+188\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b \cf2 \cb3 real	0m1.112s
\f0\b0 \cf2 \cb3 \
user	0m1.064s\
sys	0m0.021s
\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \
\
In rhiju/simplify_recursions, incur penalty of ~2 seconds(!) due to storage of arrays of DynamicProgrammingData, rather than just three simple arrays.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 BIOCHEM-C02SL0WGG8WM:alphafold rhiju$ git checkout 70fe28c63e5cd67178090b6d20ae6d1a5c0deed7\
Note: checking out '70fe28c63e5cd67178090b6d20ae6d1a5c0deed7'.\
HEAD is now at 70fe28c... new DynamicProgrammingData object developed during object-oriented update to branch rhiju/test_backtrack\
BIOCHEM-C02SL0WGG8WM:alphafold rhiju$ time ./alphafold.py -s GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
sequence = GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
cutpoint = ---------------------------------------------------------------------------X\
circle   =  False\
Z = 9.84327299285e+188\
\
real	0m3.046s\
user	0m2.944s\
sys	0m0.054s\
\pard\pardeftab720\sl280\partightenfactor0

\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\
time to check inside WrappedArray (+1.4 sec)  (added toggle --explicit to allow use of \'93explicit_recursions.py\'94)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 BIOCHEM-C02SL0WGG8WM:alphafold rhiju$ time ./alphafold.py -s GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA 
\f1\b \cf2 \cb3 --explicit\

\f0\b0 \cf2 \cb3 sequence = GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
cutpoint = ---------------------------------------------------------------------------X\
circle   =  False\
Z = 9.84327299285e+188\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b \cf2 \cb3 real	0m4.415s
\f0\b0 \cf2 \cb3 \
user	0m4.293s\
sys	0m0.058s\

\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 BIOCHEM-C02SL0WGG8WM:alphafold rhiju$ time ./alphafold.py -s GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
sequence = GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
cutpoint = ---------------------------------------------------------------------------X\
circle   =  False\
Z = 9.84327299285e+188\
\
real	0m33.398s\
user	0m32.799s\
sys	0m0.226s\
\
\pard\pardeftab720\sl280\partightenfactor0

\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 Yikes!! Major 8x slowdown!!
\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\sl280\partightenfactor0
\cf4 Note that in \'91explicit\'92 I didn\'92t have the stomach to code up backtrack. But in new object-oriented code, we get that \'91for free\'92 (no expense in coding), albeit there will be an expense in 
\f2\i time
\f0\i0 :\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 BIOCHEM-C02SL0WGG8WM:alphafold rhiju$ time ./alphafold.py -s GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA --backtrack\
\
Doing backtrack to get minimum free energy structure:\
((.(((((.(((.)).(((.(((.(.(((((((..)).)))))(((.)))..)).)..)))))).))).)))....     0.000288742468598 [MFE]\
\
sequence = GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
cutpoint = ---------------------------------------------------------------------------X\
circle   =  False\
Z = 9.84327299285e+188\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b \cf2 \cb3 real	0m46.489s
\f0\b0 \cf2 \cb3 \
user	0m45.617s\
sys	0m0.402s
\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \
Yikes!! Another 1.5x loss due to backtracking! (actually that seems pretty weird)\
\
In FORNA, can verify 5-helix structure with my super-simple model:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f3 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2018-11-04 at 4.39.19 PM.png \width12500 \height10900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sl320\partightenfactor0

\f4\b\fs28 \cf7 \cb8 \expnd0\expndtw0\kerning0
GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
\pard\pardeftab720\sl320\partightenfactor0
\cf7 \cb5 (((((((..((((........)))).((((.........)))).....(((((.......))))))))))))....\

\f0\b0\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \cb3 \ul \ulc4 Nov. 5, 2018\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \cb3 \ulnone Sped up considerably by writing a \'91compiler\'92 that takes recursions.py and \'91unrolls it\'92 to explicit_recursions.py\
Also had to change DynamicProgramming objects back to style where we had three arrays Q, dQ, and contribs, rather than a single array with a bunch of heavyweight DynamicProgrammingData classes. Now back to 1.5 seconds \'97 not too far off 1.1 seconds originally.\
\
DN0a22b440:alphafold rhiju$ time ./alphafold.py -s GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA --explicit \
sequence = GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
cutpoint = ---------------------------------------------------------------------------X\
circle   =  False\
Z = 9.84327299285e+188\
\
real	0m1.526s\
user	0m1.466s\
sys	0m0.025s\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b \cf2 \cb3 And now we get backtrack for close to free:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b0 \cf2 \cb3 DN0a22b440:alphafold rhiju$ time ./alphafold.py -s GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA --explicit  --backtrack\
\
Doing backtrack to get minimum free energy structure:\
((.(((((.(((.)).(((.(((.(.(((((((..)).)))))(((.)))..)).)..)))))).))).)))....     0.000288742468598 [MFE]\
\
sequence = GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
cutpoint = ---------------------------------------------------------------------------X\
circle   =  False\
Z = 9.84327299285e+188\
\
real	0m1.661s\
user	0m1.594s\
sys	0m0.029s\
\
\
\
If I manually remove checks on \'93calc_deriv\'94 and \'93calc_contribs\'94, I can shave off more time  (by like 0.2 sec) \'97 so there\'92s a hint for how to speed up further:\
\
DN0a22b440:alphafold rhiju$ time ./alphafold.py -s GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA --explicit \
sequence = GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
cutpoint = ---------------------------------------------------------------------------X\
circle   =  False\
Z = 9.84327299285e+188\
\
real	0m1.349s\
user	0m1.295s\
sys	0m0.025s\
\
\
\
TODO: \
\'95\'a0Need to add comments and documentation for this craziness\
\'95\'a0Set --explicit default\
\'95\'a0merge to master\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\i \cf2 \cb3 done before Nov. 12\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\i0 \cf2 \ul Nov. 12, 2018\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \cb3 \ulnone branch rhiju/energy_function\
Let\'92s put in \'91reasonable\'92 parameters:\
\
GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 (((((((..((((........)))).((((.........)))).....(((((.......)))))))))))).... NATIVE\
((((((((.(......((((.((((((..((((...........))))..))))))..))))).)))))))).... NUPACK\
(((((((...((..((..(((((((((.(((((((...))....))).))))))))..)))))))))))))).... alphafold With dG_bulge = 1.0 kcal/mol\
(((((((...((..((..(((((((((.((......((((....))))))))))))..)))))))))))))).... alphafold With dG_bulge = 2.0 kcal/mol\
((((((((........(((((((((((.((......((((....))))))))))))..))).)))))))))).... alphafold With dG_bulge = 3.4 kcal/mol\
(((((((...((..((..(((((((((((((.......))))........))))))..)))))))))))))).... alphafold with GU weaker than AU by 10x\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \
NUPACK on left; alpha fold latest on right.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f3\fs24 \cf0 \cb1 \CocoaLigature1 {{\NeXTGraphic Screen Shot 2018-11-12 at 6.29.49 AM.png \width3100 \height10160
}¬}{{\NeXTGraphic Screen Shot 2018-11-12 at 6.39.18 AM.png \width3020 \height8840
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\
\
Wait maybe coaxial stack is too strong \'97 reduce Kcoax to 10 (from 100), l_coax to 1 (from 200, which was extreme!). Hey! works:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \CocoaLigature0 (((((((..((((........)))).((((.........)))).....(((((.......)))))))))))).... NATIVE\
((((((((.(......((((.((((((..((((...........))))..))))))..))))).)))))))).... NUPACK\
(((((((...((..((..(((((((((((((.......))))........))))))..)))))))))))))).... alphafold with K_coax=10,l_coax=1\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f3\fs24 \cf0 \cb1 \CocoaLigature1 {{\NeXTGraphic Screen Shot 2018-11-12 at 7.00.44 AM.png \width4380 \height5140
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
exact match to native except for additional A\'95U closing pair in anticodon loop.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\

\f5 \
\ul P4-P6\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \ulnone \CocoaLigature0 \
Note, following alpha fold had K_coax,l_coax at original \'91bananas\'92 levels of 100,200:\
time ./alphafold.py -s GGAAUUGCGGGAAAGGGGUCAACAGCCGUUCAGUACCAAGUCUCAGGGGAAACUUUGAGAUGGCCUUGCAAAGGGUAUGGUAAUAAGCUGACGGACAUGGUCCUAACCACGCAGCCAAGUCCUAAGUCAACAGAUCUUCUGUUGAUAUGGAUGCAGUUCA  --mfe -params devel\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f5\fs18 \cf0 \cb1 \CocoaLigature1 \
GGAAUUGCGGGAAAGGGGUCAACAGCCGUUCAGUACCAAGUCUCAGGGGAAACUUUGAGAUGGCCUUGCAAAGGGUAUGGUAAUAAGCUGACGGACAUGGUCCUAACCACGCAGCCAAGUCCUAAGUCAACAGAUCUUCUGUUGAUAUGGAUGCAGUUCA\
.....((((((...((((((.....(((.((((.(((..(((((((((....)))))))))..((.......))....)))......)))))))....))))))..)).))))((...((((...(((((((((...)))))))))..))))...))... NATIVE \
.....((((((...(((((((....((((.((((((((..((((((((....))))))))...((((....))))..)))).....))))))))...)))))))..)).))))((...((((...(((((((((...)))))))))..))))))...... NUPACK\
.((((((((....(((((((......(((.((((((((((((((((((....))))))))....))...........))))).....)))))))))....))))...............(((((..((((((((...)))))))))).))))))))))). alphafold\
.((((((((....(((((((......(((.((((((((((((((((((....)))))))))..((((...)))).).))))).....)))))))))....))))...............(((((..((((((((...)))))))))).))))))))))). alphafold, ML unpaired return to 0.0 from 0.4\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 .((((((((.....(((((((....(((((...(((((.(((((((((....)))))))))..((((...))))...))))).......)))))...))))))).....................(((((((((...))))))))).....)))))))). alphafold with K_coax=10,l_coax=1\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \cb3 \
alpha fold on left, native on right\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f3\fs24 \cf0 \cb1 \CocoaLigature1 {{\NeXTGraphic Screen Shot 2018-11-12 at 6.50.43 AM.png \width16380 \height9600
}¬}\
alpha fold low-coax is better, but still have central \'91ring\'92 instead of P4-to-P6 coaxial stack:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2018-11-12 at 7.05.19 AM.png \width8860 \height7900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
should also run through contra fold\

\f0\fs22 \cf2 \cb3 \CocoaLigature0 inspect if non canonical pairs will solve the issue.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f3\fs24 \cf0 \cb1 \CocoaLigature1 {{\NeXTGraphic Screen Shot 2018-11-12 at 6.53.37 AM.png \width5520 \height8680
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \CocoaLigature0 \
}